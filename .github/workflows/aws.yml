name: Build, Push to ECR, and Deploy to EKS

# Trigger workflow on push to specific branches or manual dispatch
on:
  push:
    branches:
      - 'development/**'  
      - 'release/**'      
  workflow_dispatch:       # Allows manual triggering of the workflow

# Define permissions for GitHub Actions
permissions:
  id-token: write  
  contents: read   

# Global environment variables
env:
  AWS_REGION: us-east-1        
  ECR_REPOSITORY: nakama-server # Default ECR repository name

# Job: Build Docker image and push to ECR
jobs:
  build:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest  # Use the latest Ubuntu environment
    steps:
      # Step 1: Check out the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials for authentication
      - name: Configure AWS Credentials using IAM Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::050286875379:role/github-action
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Check EKS Connection
      - name: Verify EKS Connection
        env:
          CLUSTER_NAME: eks-cluster-Arvis
          AWS_REGION: us-east-1
        run: |
          echo "Verifying connection to EKS cluster..."
          aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
          kubectl get nodes

      # Step 4: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build and push Docker image to ECR
      - name: Build and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Determine image name based on branch type
          IMAGE_NAME=${{ github.ref_name == 'development' && 'nakama-server' || 'nakama-production' }}
          IMAGE_TAG=latest

          # Build, tag, and push the Docker image
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

          # Save the image URI for the deploy job
          echo "IMAGE_URI=$ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_ENV

      # Step 6: Deploy the image to EKS
      - name: Deploy image to EKS
        env:
          CLUSTER_NAME: eks-cluster-Arvis
          AWS_REGION: us-east-1
          ECR_IMAGE: 050286875379.dkr.ecr.us-east-1.amazonaws.com/nakama-server:latest
          DEPLOYMENT_NAME: nakama-prod
          K8S_NAMESPACE: default
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} nakama-prod=${{ env.ECR_IMAGE }}
          kubectl rollout restart deployment/${DEPLOYMENT_NAME} -n ${K8S_NAMESPACE}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${K8S_NAMESPACE}
